name: AI Repository Monitor Sync

on:
  schedule:
    # 每天 UTC 22:00 运行 (北京时间 6:00)
    - cron: '0 22 * * *'
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      update_activity:
        description: '是否更新活跃度数据'
        required: false
        default: 'true'
        type: boolean

jobs:
  sync-repositories:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: 安装依赖
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 验证配置
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
        run: |
          echo "🔧 验证API配置..."
          python3 test_config.py
          
      - name: 同步AI项目数据
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
        run: |
          echo "🚀 开始同步AI项目数据..."
          python3 sync_d1.py
          
      - name: 更新活跃度数据
        if: ${{ github.event.inputs.update_activity == 'true' || github.event_name == 'schedule' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
        run: |
          echo "📊 更新项目活跃度数据..."
          python3 -c "
          from update_activity_data import batch_update_activity_data
          batch_update_activity_data(limit=20)
          "
          
      - name: 生成统计报告
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
        run: |
          echo "📈 生成统计报告..."
          python3 -c "
          import os
          from cloudflare import Cloudflare
          from dotenv import load_dotenv
          
          load_dotenv()
          client = Cloudflare(api_token=os.environ.get('CLOUDFLARE_API_TOKEN'))
          
          # 获取统计数据
          response = client.d1.database.query(
              database_id=os.environ.get('D1_DATABASE_ID'),
              account_id=os.environ.get('CLOUDFLARE_ACCOUNT_ID'),
              sql='SELECT COUNT(*) as total, COUNT(CASE WHEN activity_score > 0 THEN 1 END) as active FROM repos'
          )
          
          if response.success and response.result:
              stats = response.result[0].results[0]
              print(f'📊 总项目数: {stats[\"total\"]}')
              print(f'🔥 活跃项目: {stats[\"active\"]}')
              print(f'✅ 同步完成!')
          "
          
      - name: 检查API使用情况
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 检查GitHub API使用情况..."
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/rate_limit | \
          python3 -c "
          import json, sys
          data = json.load(sys.stdin)
          core = data['rate']
          print(f'📊 API使用情况: {core[\"used\"]}/{core[\"limit\"]} (剩余: {core[\"remaining\"]})')
          reset_time = core['reset']
          from datetime import datetime
          reset_dt = datetime.fromtimestamp(reset_time)
          print(f'🔄 重置时间: {reset_dt}')
          "

