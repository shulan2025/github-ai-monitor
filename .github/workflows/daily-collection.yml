name: Daily AI Repository Collection

on:
  schedule:
    # 每天北京时间上午10点运行 (UTC 2:00)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (limited data collection)'
        required: false
        default: 'false'
        type: boolean
      limit:
        description: 'Limit number of repositories (test mode only)'
        required: false
        default: '100'
        type: string

jobs:
  collect:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test configuration
      env:
        GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
      run: |
        echo "�� 测试配置..."
        python3 test_config.py
        
    - name: Test keyword configuration
      run: |
        echo "🔍 测试关键词配置..."
        python3 test_keywords.py
        
    - name: Run data collection
      env:
        GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        TEST_MODE: ${{ inputs.test_mode }}
        TEST_LIMIT: ${{ inputs.limit }}
      run: |
        echo "🚀 开始数据采集..."
        if [ "${{ inputs.test_mode }}" = "true" ]; then
          echo "🧪 测试模式: 采集 ${{ inputs.limit }} 条数据"
          python3 optimized_fast_collector.py --test --limit ${{ inputs.limit }}
        else
          echo "📊 完整采集模式"
          python3 optimized_fast_collector.py
        fi
        
    - name: Check database status
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
      run: |
        echo "📊 检查数据库状态..."
        python3 -c "
        import os
        from cloudflare import Cloudflare
        
        cf = Cloudflare(token=os.environ['CLOUDFLARE_API_TOKEN'])
        
        try:
            result = cf.d1.execute(
                account_id=os.environ['CLOUDFLARE_ACCOUNT_ID'],
                database_id=os.environ['D1_DATABASE_ID'],
                sql='SELECT COUNT(*) as total FROM github_ai_post_attr'
            )
            
            if result.success and result.result:
                total = result.result[0].results[0]['total']
                print(f'✅ 数据库总记录数: {total}')
            else:
                print('❌ 数据库查询失败')
        except Exception as e:
            print(f'❌ 数据库检查失败: {e}')
        "
        
    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: collection-logs
        path: |
          *.log
          logs/
        retention-days: 7
        
    - name: Send success notification
      if: success()
      run: |
        echo "✅ 采集任务成功完成，发送成功通知..."
        python3 email_notifier.py success
        
    - name: Send failure notification
      if: failure()
      run: |
        echo "❌ 采集任务失败，发送错误通知..."
        python3 email_notifier.py failure
